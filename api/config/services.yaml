# config/services.yaml

# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.
#
# Put parameters here that don't need to change on each machine where
# the app is deployed.
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:

services:
    # ----------------------------------------
    # Default configuration for services
    # ----------------------------------------
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Services are private by default (you can override per service).

    # ----------------------------------------
    # Register your application services
    # ----------------------------------------
    # Makes classes in src/ available to be used as services.
    # This creates one service per class whose id is the fully-qualified class name.
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # ----------------------------------------
    # Expose Doctrine repositories as services
    # ----------------------------------------
    App\Repository\:
        resource: '../src/Repository'
        tags: ['doctrine.repository_service']

    # ----------------------------------------
    # Explicit service configuration
    # ----------------------------------------
    # Our custom API-Key user provider needs the ApiKeyRepository.
    App\Security\ApiKeyUserProvider:
        arguments:
            $repo: '@App\Repository\ApiKeyRepository'
        public: true

    # (Optional) If you need to inject the authenticator explicitly:
    # App\Security\ApiKeyAuthenticator:
    #     arguments:
    #         $repo: '@App\Repository\ApiKeyRepository'
    #     public: true

    # Add more service definitions when explicit configuration is needed.
    # Note that the last definitions always *replace* previous ones.
