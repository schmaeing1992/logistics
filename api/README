1. Projektstruktur & Monorepo
Root-Verzeichnis /var/www/logistics mit drei Haupt-Ordnern:

api/: Dein Symfony-Projekt inklusive Dockerfile

infra/: docker-compose.yml für API- & DB-Container

docs/: Dokumentation (Readme mit Projekt-Overview)

2. Symfony-API („api/“)
Symfony-Skeleton und Standard-Ordner (bin/, config/, public/, src/, .env) ins api/ integriert.

User-Entity (src/Entity/User.php) angelegt – implementiert UserInterface & PasswordAuthenticatedUserInterface.

Composer-Dependencies installiert (composer install).

JWT-Authentifizierung mit LexikJWT:

Paket lexik/jwt-authentication-bundle installiert

Schlüssel-Pair generiert (php bin/console lexik:jwt:generate-keypair)

security.yaml so konfiguriert, dass /api/login_check JSON-Login nutzt und alle /api-Routen per JWT geschützt sind

src/Security/JwtAuthenticator.php angepasst, damit supports(): ?bool immer bool zurückgibt

Route login_check in config/routes.yaml definiert

Datenbank-Setup & Migrationen

PostgreSQL-Container über Docker-Compose

Migrationen im Container angelegt und ausgeführt (make:migration + migrate)

Test-User marcel@marcel mit Passwort test direkt via psql eingefügt

Login-Flow

Curl-Tests lokal und über Public-IP mit POST /api/login_check erfolgreich:

json
Kopieren
Bearbeiten
{"token":"<JWT-Token>”}
3. Docker-Setup („infra/“)
docker-compose.yml mit zwei Services:

api auf Basis php:8.2-apache, Port-Mapping 8000:80, mountet ../api:/var/www/html

db mit postgres:15, Datenbank-Credentials, Persistenz-Volume

api/Dockerfile

Installiert System-Pakete, PHP-Extensions (pdo_pgsql, xml, apcu), Composer

Aktiviert Apache-Module rewrite & headers

Kopiert composer.json → composer install --no-scripts → kopiert gesamten Code → setzt DocumentRoot auf public/ + .htaccess-Support → manuelles Cache-Setup → Rechte für var/

Firewall & Networking

Host-Firewall (UFW oder iptables) auf Port 8000 geöffnet

Container lauscht auf 0.0.0.0:8000 → Public-IP erreichbar

4. Development-Workflow
Code immer im Host-Pfad /var/www/logistics/api bearbeiten.

Build & Start per

bash
Kopieren
Bearbeiten
cd infra/
docker compose up -d --build
Symfony CLI & Migrations im Container ausführen:

bash
Kopieren
Bearbeiten
docker compose exec api bash
cd /var/www/html
php bin/console …
exit
API-Tests per curl lokal (localhost:8000) oder über öffentliche IP.

5. Nächste Schritte
Order-Modul:

Order-Entity mit Feldern (z.B. trackingNumber, status, recipientName, …) anlegen

Migrationen erzeugen & ausführen

CRUD-Controller (Api/OrderController) für JSON-API implementieren

Docs/README um Setup-Anleitung erweitern

CI/CD (z. B. GitHub Actions) für automatischen Build & Tests

Weitere Entities (Address, Label etc.) nach Bedarf hinzufügen